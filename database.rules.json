{
  "rules": {
    ".read": false,
    ".write": false,
    "user": {
      // user public data
      ".read": "auth != null",
      "$user_id": {
        ".write": "auth.uid === $user_id",
        "name": {
          ".validate": "newData.isString()"
        },
        "photo": {
          ".validate": "newData.isString()"
        },
        "aboutMe": {
          ".validate": "newData.isString()"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "user-course": {
      // user's course public data
      ".read": "auth != null",
      "$user_id": {
        ".write": "auth.uid === $user_id",
        "$course_id": {
          ".validate": "newData.val() === true"
        }
      }
    },
    "instructor": {
      // instructor, none can write, can insert directly from console
      ".read": "auth != null",
      ".write": false
    },
    "course": {
      // course public data
      ".read": "auth != null",
      ".indexOn": ["owner", "timestamp", "open", "start", "public"],
      "$course_id": {
        ".write": "(!data.exists() || auth.uid === data.child('owner').val()) && (root.child('instructor/' + auth.uid).val() === true)",
        ".validate": "data.exists() || newData.hasChildren(['title', 'description', 'photo', 'owner', 'timestamp'])",
        "title": {
          ".validate": "newData.isString()"
        },
        "shortDescription": {
          ".validate": "newData.isString()"
        },
        "description": {
          ".validate": "newData.isString()"
        },
        "photo": {
          ".validate": "newData.isString()"
        },
        "owner": {
          ".validate": "newData.val() === auth.uid"
        },
        "timestamp": {
          ".validate": "newData.val() <= now"
        },
        "favorite": {
          "$user_id": {
            ".write": "auth.uid === $user_id",
            ".validate": "newData.val() === true"
          }
        },
        "student": {
          "$user_id": {
            ".write": "auth.uid === $user_id && data.parent().parent().exists() && data.parent().parent().child('open').val() === true",
            ".validate": "newData.val() === true"
          }
        },
        "open": {
          ".validate": "newData.isBoolean()"
        },
        "public": {
          ".validate": "newData.isBoolean()"
        },
        "start": {
          ".validate": "newData.isString()"
        },
        "attend": {
          ".validate": "newData.isString()"
        },
        "video": {
          ".validate": "newData.isString()"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "course-private": {
      // private course data, only owner can read and write
      // use for validate other user actions
      "$course_id": {
        ".read": "root.child('course/' + $course_id + '/owner').val() === true",
        ".write": "root.child('course/' + $course_id + '/owner').val() === true",
        "code": {
          ".validate": "newData.isString() && newData.val().length > 0"
        }
      }
    },
    "content": {
      "$course_id": {
        ".write": "root.child('course/' + $course_id + '/owner').val() === auth.uid",
        ".read": "root.child('course/' + $course_id + '/student/' + auth.uid).val() === true || root.child('course/' + $course_id + '/owner').val() === auth.uid",
        "$content_id": {
          "title": {
            ".validate": "newData.isString()"
          },
          "content": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": false
          }
        }
      }
    },
    "chat": {
      "$course_id": {
        ".read": "root.child('course/' + $course_id + '/student/' + auth.uid).val() === true || root.child('course/' + $course_id + '/owner').val() === auth.uid",
        "$message_id": {
          ".write": "(root.child('course/' + $course_id + '/student/' + auth.uid).val() === true || root.child('course/' + $course_id + '/owner').val() === auth.uid) && !data.exists()",
          "u": {
            ".validate": "newData.val() === auth.uid"
          },
          "m": {
            ".validate": "newData.isString()"
          },
          "t": {
            ".validate": "newData.val() <= now"
          },
          "$other": {
            ".validate": false
          }
        }
      }
    },
    "attend": {
      "$course_id": {
        ".read": "root.child('course/' + $course_id + '/owner').val() === auth.uid",
        "$code": {
          "$user_id": {
            ".write": "auth.uid === $user_id && $code === root.child('course/' + $course_id + '/attend').val()",
            ".read": "auth.uid === $user_id",
            ".validate": "newData.val() <= now"
          }
        }
      }
    },
    "assignment": {
      "$course_id": {
        ".read": "root.child('course/' + $course_id + '/owner').val() === auth.uid",
        "code": {
          ".write": "root.child('course/' + $course_id + '/owner').val() === auth.uid",
          ".read": "root.child('course/' + $course_id + '/student/' + auth.uid).val() === true",
          "$assignment_id": {
            "title": {
              ".validate": "newData.isString()"
            },
            "open": {
              ".validate": "newData.isBoolean()"
            }
          }
        },
        "user": {
          "$user_id": {
            ".read": "auth.uid === $user_id && root.child('course/' + $course_id + '/student/' + auth.uid).val() === true",
            ".write": "auth.uid === $user_id && root.child('course/' + $course_id + '/student/' + auth.uid).val() === true",
            "$assignment_id": {
              ".validate": "root.child('assignment/' + $course_id + '/code/' + $assignment_id + '/open').val() === true",
              "$file_id": {
                "timestamp": {
                  ".validate": "newData.val() <= now"
                },
                "url": {
                  ".validate": "newData.isString()"
                },
                "$other": {
                  ".validate": false
                }
              }
            }
          }
        }
      }
    },
    "notification": {
      ".indexOn": ["user"],
      "$token": {
        ".write": true
      }
    }
  }
}
