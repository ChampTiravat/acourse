// Code generated by protoc-gen-go.
// source: acourse.proto
// DO NOT EDIT!

/*
Package acourse is a generated protocol buffer package.

It is generated from these files:
	acourse.proto

It has these top-level messages:
	UserIDRequest
	UserIDsRequest
	UsersResponse
	GetMeResponse
	ListRequest
	PaymentsResponse
	PaymentIDsRequest
	PaymentUpdatePriceRequest
	CoursesResponse
	CourseIDRequest
	EnrollRequest
	CourseResponse
	Empty
	User
	Role
	Email
	Course
	CourseSmall
	CourseTiny
	Payment
	PaymentFindRequest
	EnrollCount
	Assignment
	AssignmentIDRequest
	AssignmentIDsRequest
	AssignmentsResponse
	UserAssignment
	UserAssignmentsResponse
	UserAssignmentIDRequest
	Enroll
	EnrollsRequest
	EnrollFindRequest
*/
package acourse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserIDRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *UserIDRequest) Reset()                    { *m = UserIDRequest{} }
func (m *UserIDRequest) String() string            { return proto.CompactTextString(m) }
func (*UserIDRequest) ProtoMessage()               {}
func (*UserIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserIDRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type UserIDsRequest struct {
	UserIds []string `protobuf:"bytes,1,rep,name=userIds" json:"userIds,omitempty"`
}

func (m *UserIDsRequest) Reset()                    { *m = UserIDsRequest{} }
func (m *UserIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*UserIDsRequest) ProtoMessage()               {}
func (*UserIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserIDsRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type UsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *UsersResponse) Reset()                    { *m = UsersResponse{} }
func (m *UsersResponse) String() string            { return proto.CompactTextString(m) }
func (*UsersResponse) ProtoMessage()               {}
func (*UsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type GetMeResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Role *Role `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
}

func (m *GetMeResponse) Reset()                    { *m = GetMeResponse{} }
func (m *GetMeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMeResponse) ProtoMessage()               {}
func (*GetMeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetMeResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GetMeResponse) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type ListRequest struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type PaymentsResponse struct {
	Payments []*Payment    `protobuf:"bytes,1,rep,name=payments" json:"payments,omitempty"`
	Users    []*User       `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	Courses  []*CourseTiny `protobuf:"bytes,3,rep,name=courses" json:"courses,omitempty"`
}

func (m *PaymentsResponse) Reset()                    { *m = PaymentsResponse{} }
func (m *PaymentsResponse) String() string            { return proto.CompactTextString(m) }
func (*PaymentsResponse) ProtoMessage()               {}
func (*PaymentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PaymentsResponse) GetPayments() []*Payment {
	if m != nil {
		return m.Payments
	}
	return nil
}

func (m *PaymentsResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *PaymentsResponse) GetCourses() []*CourseTiny {
	if m != nil {
		return m.Courses
	}
	return nil
}

type PaymentIDsRequest struct {
	PaymentIds []string `protobuf:"bytes,1,rep,name=paymentIds" json:"paymentIds,omitempty"`
}

func (m *PaymentIDsRequest) Reset()                    { *m = PaymentIDsRequest{} }
func (m *PaymentIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*PaymentIDsRequest) ProtoMessage()               {}
func (*PaymentIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PaymentIDsRequest) GetPaymentIds() []string {
	if m != nil {
		return m.PaymentIds
	}
	return nil
}

type PaymentUpdatePriceRequest struct {
	PaymentId string  `protobuf:"bytes,1,opt,name=paymentId" json:"paymentId,omitempty"`
	Price     float64 `protobuf:"fixed64,2,opt,name=price" json:"price,omitempty"`
}

func (m *PaymentUpdatePriceRequest) Reset()                    { *m = PaymentUpdatePriceRequest{} }
func (m *PaymentUpdatePriceRequest) String() string            { return proto.CompactTextString(m) }
func (*PaymentUpdatePriceRequest) ProtoMessage()               {}
func (*PaymentUpdatePriceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PaymentUpdatePriceRequest) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

func (m *PaymentUpdatePriceRequest) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type CoursesResponse struct {
	Courses      []*CourseSmall `protobuf:"bytes,1,rep,name=courses" json:"courses,omitempty"`
	Users        []*User        `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
	EnrollCounts []*EnrollCount `protobuf:"bytes,3,rep,name=enrollCounts" json:"enrollCounts,omitempty"`
}

func (m *CoursesResponse) Reset()                    { *m = CoursesResponse{} }
func (m *CoursesResponse) String() string            { return proto.CompactTextString(m) }
func (*CoursesResponse) ProtoMessage()               {}
func (*CoursesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CoursesResponse) GetCourses() []*CourseSmall {
	if m != nil {
		return m.Courses
	}
	return nil
}

func (m *CoursesResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *CoursesResponse) GetEnrollCounts() []*EnrollCount {
	if m != nil {
		return m.EnrollCounts
	}
	return nil
}

type CourseIDRequest struct {
	CourseId string `protobuf:"bytes,1,opt,name=courseId" json:"courseId,omitempty"`
}

func (m *CourseIDRequest) Reset()                    { *m = CourseIDRequest{} }
func (m *CourseIDRequest) String() string            { return proto.CompactTextString(m) }
func (*CourseIDRequest) ProtoMessage()               {}
func (*CourseIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CourseIDRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

type EnrollRequest struct {
	CourseId string  `protobuf:"bytes,1,opt,name=courseId" json:"courseId,omitempty"`
	Url      string  `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Code     string  `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	Price    float64 `protobuf:"fixed64,4,opt,name=price" json:"price,omitempty"`
}

func (m *EnrollRequest) Reset()                    { *m = EnrollRequest{} }
func (m *EnrollRequest) String() string            { return proto.CompactTextString(m) }
func (*EnrollRequest) ProtoMessage()               {}
func (*EnrollRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EnrollRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *EnrollRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *EnrollRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *EnrollRequest) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type CourseResponse struct {
	Course   *Course `protobuf:"bytes,1,opt,name=course" json:"course,omitempty"`
	User     *User   `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Enrolled bool    `protobuf:"varint,3,opt,name=enrolled" json:"enrolled,omitempty"`
	Owned    bool    `protobuf:"varint,4,opt,name=owned" json:"owned,omitempty"`
	Purchase bool    `protobuf:"varint,5,opt,name=purchase" json:"purchase,omitempty"`
	Attended bool    `protobuf:"varint,6,opt,name=attended" json:"attended,omitempty"`
}

func (m *CourseResponse) Reset()                    { *m = CourseResponse{} }
func (m *CourseResponse) String() string            { return proto.CompactTextString(m) }
func (*CourseResponse) ProtoMessage()               {}
func (*CourseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CourseResponse) GetCourse() *Course {
	if m != nil {
		return m.Course
	}
	return nil
}

func (m *CourseResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CourseResponse) GetEnrolled() bool {
	if m != nil {
		return m.Enrolled
	}
	return false
}

func (m *CourseResponse) GetOwned() bool {
	if m != nil {
		return m.Owned
	}
	return false
}

func (m *CourseResponse) GetPurchase() bool {
	if m != nil {
		return m.Purchase
	}
	return false
}

func (m *CourseResponse) GetAttended() bool {
	if m != nil {
		return m.Attended
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type User struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Photo    string `protobuf:"bytes,4,opt,name=photo" json:"photo,omitempty"`
	AboutMe  string `protobuf:"bytes,5,opt,name=aboutMe" json:"aboutMe,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *User) GetAboutMe() string {
	if m != nil {
		return m.AboutMe
	}
	return ""
}

type Role struct {
	Admin      bool `protobuf:"varint,1,opt,name=admin" json:"admin,omitempty"`
	Instructor bool `protobuf:"varint,2,opt,name=instructor" json:"instructor,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Role) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *Role) GetInstructor() bool {
	if m != nil {
		return m.Instructor
	}
	return false
}

type Email struct {
	To      []string `protobuf:"bytes,1,rep,name=to" json:"to,omitempty"`
	Subject string   `protobuf:"bytes,2,opt,name=subject" json:"subject,omitempty"`
	Body    string   `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
}

func (m *Email) Reset()                    { *m = Email{} }
func (m *Email) String() string            { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()               {}
func (*Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Email) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Email) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Email) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Course struct {
	Id               string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedAt        string            `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt        string            `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
	Title            string            `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	ShortDescription string            `protobuf:"bytes,5,opt,name=shortDescription" json:"shortDescription,omitempty"`
	Description      string            `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Photo            string            `protobuf:"bytes,7,opt,name=photo" json:"photo,omitempty"`
	Owner            string            `protobuf:"bytes,8,opt,name=owner" json:"owner,omitempty"`
	Start            string            `protobuf:"bytes,9,opt,name=start" json:"start,omitempty"`
	Url              string            `protobuf:"bytes,10,opt,name=url" json:"url,omitempty"`
	Type             string            `protobuf:"bytes,11,opt,name=type" json:"type,omitempty"`
	Video            string            `protobuf:"bytes,12,opt,name=video" json:"video,omitempty"`
	Price            float64           `protobuf:"fixed64,13,opt,name=price" json:"price,omitempty"`
	DiscountedPrice  float64           `protobuf:"fixed64,14,opt,name=discountedPrice" json:"discountedPrice,omitempty"`
	Options          *Course_Option    `protobuf:"bytes,15,opt,name=options" json:"options,omitempty"`
	Contents         []*Course_Content `protobuf:"bytes,16,rep,name=contents" json:"contents,omitempty"`
	EnrollDetail     string            `protobuf:"bytes,17,opt,name=enrollDetail" json:"enrollDetail,omitempty"`
}

func (m *Course) Reset()                    { *m = Course{} }
func (m *Course) String() string            { return proto.CompactTextString(m) }
func (*Course) ProtoMessage()               {}
func (*Course) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Course) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Course) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Course) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Course) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Course) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *Course) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Course) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *Course) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Course) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *Course) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Course) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Course) GetVideo() string {
	if m != nil {
		return m.Video
	}
	return ""
}

func (m *Course) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Course) GetDiscountedPrice() float64 {
	if m != nil {
		return m.DiscountedPrice
	}
	return 0
}

func (m *Course) GetOptions() *Course_Option {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Course) GetContents() []*Course_Content {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *Course) GetEnrollDetail() string {
	if m != nil {
		return m.EnrollDetail
	}
	return ""
}

type Course_Content struct {
	Title       string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Video       string `protobuf:"bytes,3,opt,name=video" json:"video,omitempty"`
	DownloadURL string `protobuf:"bytes,4,opt,name=downloadURL" json:"downloadURL,omitempty"`
}

func (m *Course_Content) Reset()                    { *m = Course_Content{} }
func (m *Course_Content) String() string            { return proto.CompactTextString(m) }
func (*Course_Content) ProtoMessage()               {}
func (*Course_Content) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 0} }

func (m *Course_Content) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Course_Content) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Course_Content) GetVideo() string {
	if m != nil {
		return m.Video
	}
	return ""
}

func (m *Course_Content) GetDownloadURL() string {
	if m != nil {
		return m.DownloadURL
	}
	return ""
}

type Course_Option struct {
	Public     bool `protobuf:"varint,1,opt,name=public" json:"public,omitempty"`
	Enroll     bool `protobuf:"varint,2,opt,name=enroll" json:"enroll,omitempty"`
	Attend     bool `protobuf:"varint,3,opt,name=attend" json:"attend,omitempty"`
	Assignment bool `protobuf:"varint,4,opt,name=assignment" json:"assignment,omitempty"`
	Discount   bool `protobuf:"varint,5,opt,name=discount" json:"discount,omitempty"`
}

func (m *Course_Option) Reset()                    { *m = Course_Option{} }
func (m *Course_Option) String() string            { return proto.CompactTextString(m) }
func (*Course_Option) ProtoMessage()               {}
func (*Course_Option) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16, 1} }

func (m *Course_Option) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *Course_Option) GetEnroll() bool {
	if m != nil {
		return m.Enroll
	}
	return false
}

func (m *Course_Option) GetAttend() bool {
	if m != nil {
		return m.Attend
	}
	return false
}

func (m *Course_Option) GetAssignment() bool {
	if m != nil {
		return m.Assignment
	}
	return false
}

func (m *Course_Option) GetDiscount() bool {
	if m != nil {
		return m.Discount
	}
	return false
}

type CourseSmall struct {
	Id               string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title            string              `protobuf:"bytes,4,opt,name=title" json:"title,omitempty"`
	ShortDescription string              `protobuf:"bytes,5,opt,name=shortDescription" json:"shortDescription,omitempty"`
	Photo            string              `protobuf:"bytes,7,opt,name=photo" json:"photo,omitempty"`
	Owner            string              `protobuf:"bytes,8,opt,name=owner" json:"owner,omitempty"`
	Start            string              `protobuf:"bytes,9,opt,name=start" json:"start,omitempty"`
	Url              string              `protobuf:"bytes,10,opt,name=url" json:"url,omitempty"`
	Type             string              `protobuf:"bytes,11,opt,name=type" json:"type,omitempty"`
	Price            float64             `protobuf:"fixed64,13,opt,name=price" json:"price,omitempty"`
	DiscountedPrice  float64             `protobuf:"fixed64,14,opt,name=discountedPrice" json:"discountedPrice,omitempty"`
	Options          *CourseSmall_Option `protobuf:"bytes,15,opt,name=options" json:"options,omitempty"`
}

func (m *CourseSmall) Reset()                    { *m = CourseSmall{} }
func (m *CourseSmall) String() string            { return proto.CompactTextString(m) }
func (*CourseSmall) ProtoMessage()               {}
func (*CourseSmall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CourseSmall) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CourseSmall) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CourseSmall) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *CourseSmall) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *CourseSmall) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *CourseSmall) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *CourseSmall) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CourseSmall) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CourseSmall) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CourseSmall) GetDiscountedPrice() float64 {
	if m != nil {
		return m.DiscountedPrice
	}
	return 0
}

func (m *CourseSmall) GetOptions() *CourseSmall_Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type CourseSmall_Option struct {
	Discount bool `protobuf:"varint,5,opt,name=discount" json:"discount,omitempty"`
}

func (m *CourseSmall_Option) Reset()                    { *m = CourseSmall_Option{} }
func (m *CourseSmall_Option) String() string            { return proto.CompactTextString(m) }
func (*CourseSmall_Option) ProtoMessage()               {}
func (*CourseSmall_Option) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

func (m *CourseSmall_Option) GetDiscount() bool {
	if m != nil {
		return m.Discount
	}
	return false
}

type CourseTiny struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *CourseTiny) Reset()                    { *m = CourseTiny{} }
func (m *CourseTiny) String() string            { return proto.CompactTextString(m) }
func (*CourseTiny) ProtoMessage()               {}
func (*CourseTiny) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CourseTiny) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CourseTiny) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type Payment struct {
	Id            string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedAt     string  `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt     string  `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
	UserId        string  `protobuf:"bytes,4,opt,name=userId" json:"userId,omitempty"`
	CourseId      string  `protobuf:"bytes,5,opt,name=courseId" json:"courseId,omitempty"`
	OriginalPrice float64 `protobuf:"fixed64,6,opt,name=originalPrice" json:"originalPrice,omitempty"`
	Price         float64 `protobuf:"fixed64,7,opt,name=price" json:"price,omitempty"`
	Code          string  `protobuf:"bytes,8,opt,name=code" json:"code,omitempty"`
	Url           string  `protobuf:"bytes,9,opt,name=url" json:"url,omitempty"`
	Status        string  `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	At            string  `protobuf:"bytes,11,opt,name=at" json:"at,omitempty"`
}

func (m *Payment) Reset()                    { *m = Payment{} }
func (m *Payment) String() string            { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()               {}
func (*Payment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Payment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Payment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Payment) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Payment) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Payment) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *Payment) GetOriginalPrice() float64 {
	if m != nil {
		return m.OriginalPrice
	}
	return 0
}

func (m *Payment) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Payment) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Payment) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Payment) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Payment) GetAt() string {
	if m != nil {
		return m.At
	}
	return ""
}

type PaymentFindRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	CourseId string `protobuf:"bytes,2,opt,name=courseId" json:"courseId,omitempty"`
	Status   string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *PaymentFindRequest) Reset()                    { *m = PaymentFindRequest{} }
func (m *PaymentFindRequest) String() string            { return proto.CompactTextString(m) }
func (*PaymentFindRequest) ProtoMessage()               {}
func (*PaymentFindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PaymentFindRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *PaymentFindRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *PaymentFindRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type EnrollCount struct {
	CourseId string `protobuf:"bytes,1,opt,name=courseId" json:"courseId,omitempty"`
	Count    int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *EnrollCount) Reset()                    { *m = EnrollCount{} }
func (m *EnrollCount) String() string            { return proto.CompactTextString(m) }
func (*EnrollCount) ProtoMessage()               {}
func (*EnrollCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *EnrollCount) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *EnrollCount) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Assignment struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedAt   string `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt   string `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
	CourseId    string `protobuf:"bytes,4,opt,name=courseId" json:"courseId,omitempty"`
	Title       string `protobuf:"bytes,5,opt,name=title" json:"title,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Open        bool   `protobuf:"varint,7,opt,name=open" json:"open,omitempty"`
}

func (m *Assignment) Reset()                    { *m = Assignment{} }
func (m *Assignment) String() string            { return proto.CompactTextString(m) }
func (*Assignment) ProtoMessage()               {}
func (*Assignment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Assignment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Assignment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Assignment) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Assignment) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *Assignment) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Assignment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Assignment) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

type AssignmentIDRequest struct {
	AssignmentId string `protobuf:"bytes,1,opt,name=assignmentId" json:"assignmentId,omitempty"`
}

func (m *AssignmentIDRequest) Reset()                    { *m = AssignmentIDRequest{} }
func (m *AssignmentIDRequest) String() string            { return proto.CompactTextString(m) }
func (*AssignmentIDRequest) ProtoMessage()               {}
func (*AssignmentIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *AssignmentIDRequest) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

type AssignmentIDsRequest struct {
	AssignmentIds []string `protobuf:"bytes,1,rep,name=assignmentIds" json:"assignmentIds,omitempty"`
}

func (m *AssignmentIDsRequest) Reset()                    { *m = AssignmentIDsRequest{} }
func (m *AssignmentIDsRequest) String() string            { return proto.CompactTextString(m) }
func (*AssignmentIDsRequest) ProtoMessage()               {}
func (*AssignmentIDsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *AssignmentIDsRequest) GetAssignmentIds() []string {
	if m != nil {
		return m.AssignmentIds
	}
	return nil
}

type AssignmentsResponse struct {
	Assignments []*Assignment `protobuf:"bytes,1,rep,name=assignments" json:"assignments,omitempty"`
}

func (m *AssignmentsResponse) Reset()                    { *m = AssignmentsResponse{} }
func (m *AssignmentsResponse) String() string            { return proto.CompactTextString(m) }
func (*AssignmentsResponse) ProtoMessage()               {}
func (*AssignmentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *AssignmentsResponse) GetAssignments() []*Assignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type UserAssignment struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedAt    string `protobuf:"bytes,2,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt    string `protobuf:"bytes,3,opt,name=updatedAt" json:"updatedAt,omitempty"`
	AssignmentId string `protobuf:"bytes,4,opt,name=assignmentId" json:"assignmentId,omitempty"`
	UserId       string `protobuf:"bytes,5,opt,name=userId" json:"userId,omitempty"`
	Url          string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
}

func (m *UserAssignment) Reset()                    { *m = UserAssignment{} }
func (m *UserAssignment) String() string            { return proto.CompactTextString(m) }
func (*UserAssignment) ProtoMessage()               {}
func (*UserAssignment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UserAssignment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserAssignment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *UserAssignment) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *UserAssignment) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

func (m *UserAssignment) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserAssignment) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type UserAssignmentsResponse struct {
	UserAssignments []*UserAssignment `protobuf:"bytes,1,rep,name=userAssignments" json:"userAssignments,omitempty"`
}

func (m *UserAssignmentsResponse) Reset()                    { *m = UserAssignmentsResponse{} }
func (m *UserAssignmentsResponse) String() string            { return proto.CompactTextString(m) }
func (*UserAssignmentsResponse) ProtoMessage()               {}
func (*UserAssignmentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *UserAssignmentsResponse) GetUserAssignments() []*UserAssignment {
	if m != nil {
		return m.UserAssignments
	}
	return nil
}

type UserAssignmentIDRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserAssignmentIDRequest) Reset()                    { *m = UserAssignmentIDRequest{} }
func (m *UserAssignmentIDRequest) String() string            { return proto.CompactTextString(m) }
func (*UserAssignmentIDRequest) ProtoMessage()               {}
func (*UserAssignmentIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UserAssignmentIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Enroll struct {
	UserID   string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	CourseID string `protobuf:"bytes,2,opt,name=CourseID" json:"CourseID,omitempty"`
}

func (m *Enroll) Reset()                    { *m = Enroll{} }
func (m *Enroll) String() string            { return proto.CompactTextString(m) }
func (*Enroll) ProtoMessage()               {}
func (*Enroll) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *Enroll) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *Enroll) GetCourseID() string {
	if m != nil {
		return m.CourseID
	}
	return ""
}

type EnrollsRequest struct {
	Enrolls []*Enroll `protobuf:"bytes,1,rep,name=enrolls" json:"enrolls,omitempty"`
}

func (m *EnrollsRequest) Reset()                    { *m = EnrollsRequest{} }
func (m *EnrollsRequest) String() string            { return proto.CompactTextString(m) }
func (*EnrollsRequest) ProtoMessage()               {}
func (*EnrollsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *EnrollsRequest) GetEnrolls() []*Enroll {
	if m != nil {
		return m.Enrolls
	}
	return nil
}

type EnrollFindRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	CourseId string `protobuf:"bytes,2,opt,name=courseId" json:"courseId,omitempty"`
}

func (m *EnrollFindRequest) Reset()                    { *m = EnrollFindRequest{} }
func (m *EnrollFindRequest) String() string            { return proto.CompactTextString(m) }
func (*EnrollFindRequest) ProtoMessage()               {}
func (*EnrollFindRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *EnrollFindRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *EnrollFindRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func init() {
	proto.RegisterType((*UserIDRequest)(nil), "acourse.UserIDRequest")
	proto.RegisterType((*UserIDsRequest)(nil), "acourse.UserIDsRequest")
	proto.RegisterType((*UsersResponse)(nil), "acourse.UsersResponse")
	proto.RegisterType((*GetMeResponse)(nil), "acourse.GetMeResponse")
	proto.RegisterType((*ListRequest)(nil), "acourse.ListRequest")
	proto.RegisterType((*PaymentsResponse)(nil), "acourse.PaymentsResponse")
	proto.RegisterType((*PaymentIDsRequest)(nil), "acourse.PaymentIDsRequest")
	proto.RegisterType((*PaymentUpdatePriceRequest)(nil), "acourse.PaymentUpdatePriceRequest")
	proto.RegisterType((*CoursesResponse)(nil), "acourse.CoursesResponse")
	proto.RegisterType((*CourseIDRequest)(nil), "acourse.CourseIDRequest")
	proto.RegisterType((*EnrollRequest)(nil), "acourse.EnrollRequest")
	proto.RegisterType((*CourseResponse)(nil), "acourse.CourseResponse")
	proto.RegisterType((*Empty)(nil), "acourse.Empty")
	proto.RegisterType((*User)(nil), "acourse.User")
	proto.RegisterType((*Role)(nil), "acourse.Role")
	proto.RegisterType((*Email)(nil), "acourse.Email")
	proto.RegisterType((*Course)(nil), "acourse.Course")
	proto.RegisterType((*Course_Content)(nil), "acourse.Course.Content")
	proto.RegisterType((*Course_Option)(nil), "acourse.Course.Option")
	proto.RegisterType((*CourseSmall)(nil), "acourse.CourseSmall")
	proto.RegisterType((*CourseSmall_Option)(nil), "acourse.CourseSmall.Option")
	proto.RegisterType((*CourseTiny)(nil), "acourse.CourseTiny")
	proto.RegisterType((*Payment)(nil), "acourse.Payment")
	proto.RegisterType((*PaymentFindRequest)(nil), "acourse.PaymentFindRequest")
	proto.RegisterType((*EnrollCount)(nil), "acourse.EnrollCount")
	proto.RegisterType((*Assignment)(nil), "acourse.Assignment")
	proto.RegisterType((*AssignmentIDRequest)(nil), "acourse.AssignmentIDRequest")
	proto.RegisterType((*AssignmentIDsRequest)(nil), "acourse.AssignmentIDsRequest")
	proto.RegisterType((*AssignmentsResponse)(nil), "acourse.AssignmentsResponse")
	proto.RegisterType((*UserAssignment)(nil), "acourse.UserAssignment")
	proto.RegisterType((*UserAssignmentsResponse)(nil), "acourse.UserAssignmentsResponse")
	proto.RegisterType((*UserAssignmentIDRequest)(nil), "acourse.UserAssignmentIDRequest")
	proto.RegisterType((*Enroll)(nil), "acourse.Enroll")
	proto.RegisterType((*EnrollsRequest)(nil), "acourse.EnrollsRequest")
	proto.RegisterType((*EnrollFindRequest)(nil), "acourse.EnrollFindRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	GetUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*User, error)
	GetUsers(ctx context.Context, in *UserIDsRequest, opts ...grpc.CallOption) (*UsersResponse, error)
	GetMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMeResponse, error)
	UpdateMe(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	GetRole(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*Role, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/acourse.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *UserIDsRequest, opts ...grpc.CallOption) (*UsersResponse, error) {
	out := new(UsersResponse)
	err := grpc.Invoke(ctx, "/acourse.UserService/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetMeResponse, error) {
	out := new(GetMeResponse)
	err := grpc.Invoke(ctx, "/acourse.UserService/GetMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateMe(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.UserService/UpdateMe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRole(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/acourse.UserService/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	GetUser(context.Context, *UserIDRequest) (*User, error)
	GetUsers(context.Context, *UserIDsRequest) (*UsersResponse, error)
	GetMe(context.Context, *Empty) (*GetMeResponse, error)
	UpdateMe(context.Context, *User) (*Empty, error)
	GetRole(context.Context, *UserIDRequest) (*Role, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*UserIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.UserService/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMe(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.UserService/UpdateMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateMe(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.UserService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRole(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acourse.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _UserService_GetMe_Handler,
		},
		{
			MethodName: "UpdateMe",
			Handler:    _UserService_UpdateMe_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _UserService_GetRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acourse.proto",
}

// Client API for EmailService service

type EmailServiceClient interface {
	Send(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Empty, error)
}

type emailServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmailServiceClient(cc *grpc.ClientConn) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) Send(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.EmailService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailService service

type EmailServiceServer interface {
	Send(context.Context, *Email) (*Empty, error)
}

func RegisterEmailServiceServer(s *grpc.Server, srv EmailServiceServer) {
	s.RegisterService(&_EmailService_serviceDesc, srv)
}

func _EmailService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.EmailService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).Send(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acourse.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _EmailService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acourse.proto",
}

// Client API for PaymentService service

type PaymentServiceClient interface {
	ListWaitingPayments(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PaymentsResponse, error)
	ListHistoryPayments(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PaymentsResponse, error)
	ApprovePayments(ctx context.Context, in *PaymentIDsRequest, opts ...grpc.CallOption) (*Empty, error)
	RejectPayments(ctx context.Context, in *PaymentIDsRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdatePrice(ctx context.Context, in *PaymentUpdatePriceRequest, opts ...grpc.CallOption) (*Empty, error)
	FindPayment(ctx context.Context, in *PaymentFindRequest, opts ...grpc.CallOption) (*Payment, error)
	CreatePayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Empty, error)
}

type paymentServiceClient struct {
	cc *grpc.ClientConn
}

func NewPaymentServiceClient(cc *grpc.ClientConn) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) ListWaitingPayments(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PaymentsResponse, error) {
	out := new(PaymentsResponse)
	err := grpc.Invoke(ctx, "/acourse.PaymentService/ListWaitingPayments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListHistoryPayments(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*PaymentsResponse, error) {
	out := new(PaymentsResponse)
	err := grpc.Invoke(ctx, "/acourse.PaymentService/ListHistoryPayments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ApprovePayments(ctx context.Context, in *PaymentIDsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.PaymentService/ApprovePayments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RejectPayments(ctx context.Context, in *PaymentIDsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.PaymentService/RejectPayments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdatePrice(ctx context.Context, in *PaymentUpdatePriceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.PaymentService/UpdatePrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) FindPayment(ctx context.Context, in *PaymentFindRequest, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := grpc.Invoke(ctx, "/acourse.PaymentService/FindPayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreatePayment(ctx context.Context, in *Payment, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.PaymentService/CreatePayment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PaymentService service

type PaymentServiceServer interface {
	ListWaitingPayments(context.Context, *ListRequest) (*PaymentsResponse, error)
	ListHistoryPayments(context.Context, *ListRequest) (*PaymentsResponse, error)
	ApprovePayments(context.Context, *PaymentIDsRequest) (*Empty, error)
	RejectPayments(context.Context, *PaymentIDsRequest) (*Empty, error)
	UpdatePrice(context.Context, *PaymentUpdatePriceRequest) (*Empty, error)
	FindPayment(context.Context, *PaymentFindRequest) (*Payment, error)
	CreatePayment(context.Context, *Payment) (*Empty, error)
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_ListWaitingPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListWaitingPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.PaymentService/ListWaitingPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListWaitingPayments(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListHistoryPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListHistoryPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.PaymentService/ListHistoryPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListHistoryPayments(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ApprovePayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ApprovePayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.PaymentService/ApprovePayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ApprovePayments(ctx, req.(*PaymentIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RejectPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RejectPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.PaymentService/RejectPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RejectPayments(ctx, req.(*PaymentIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentUpdatePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.PaymentService/UpdatePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdatePrice(ctx, req.(*PaymentUpdatePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_FindPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).FindPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.PaymentService/FindPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).FindPayment(ctx, req.(*PaymentFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.PaymentService/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePayment(ctx, req.(*Payment))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acourse.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWaitingPayments",
			Handler:    _PaymentService_ListWaitingPayments_Handler,
		},
		{
			MethodName: "ListHistoryPayments",
			Handler:    _PaymentService_ListHistoryPayments_Handler,
		},
		{
			MethodName: "ApprovePayments",
			Handler:    _PaymentService_ApprovePayments_Handler,
		},
		{
			MethodName: "RejectPayments",
			Handler:    _PaymentService_RejectPayments_Handler,
		},
		{
			MethodName: "UpdatePrice",
			Handler:    _PaymentService_UpdatePrice_Handler,
		},
		{
			MethodName: "FindPayment",
			Handler:    _PaymentService_FindPayment_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentService_CreatePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acourse.proto",
}

// Client API for CourseService service

type CourseServiceClient interface {
	ListCourses(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CoursesResponse, error)
	ListPublicCourses(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CoursesResponse, error)
	ListOwnCourses(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CoursesResponse, error)
	ListEnrolledCourses(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CoursesResponse, error)
	GetCourse(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*CourseResponse, error)
	CreateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Course, error)
	UpdateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Empty, error)
	EnrollCourse(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*Empty, error)
	AttendCourse(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*Empty, error)
	OpenAttend(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*Empty, error)
	CloseAttend(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateEnrolls(ctx context.Context, in *EnrollsRequest, opts ...grpc.CallOption) (*Empty, error)
	FindEnroll(ctx context.Context, in *EnrollFindRequest, opts ...grpc.CallOption) (*Enroll, error)
}

type courseServiceClient struct {
	cc *grpc.ClientConn
}

func NewCourseServiceClient(cc *grpc.ClientConn) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) ListCourses(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CoursesResponse, error) {
	out := new(CoursesResponse)
	err := grpc.Invoke(ctx, "/acourse.CourseService/ListCourses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ListPublicCourses(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*CoursesResponse, error) {
	out := new(CoursesResponse)
	err := grpc.Invoke(ctx, "/acourse.CourseService/ListPublicCourses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ListOwnCourses(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CoursesResponse, error) {
	out := new(CoursesResponse)
	err := grpc.Invoke(ctx, "/acourse.CourseService/ListOwnCourses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ListEnrolledCourses(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*CoursesResponse, error) {
	out := new(CoursesResponse)
	err := grpc.Invoke(ctx, "/acourse.CourseService/ListEnrolledCourses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetCourse(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*CourseResponse, error) {
	out := new(CourseResponse)
	err := grpc.Invoke(ctx, "/acourse.CourseService/GetCourse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) CreateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Course, error) {
	out := new(Course)
	err := grpc.Invoke(ctx, "/acourse.CourseService/CreateCourse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) UpdateCourse(ctx context.Context, in *Course, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.CourseService/UpdateCourse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) EnrollCourse(ctx context.Context, in *EnrollRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.CourseService/EnrollCourse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AttendCourse(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.CourseService/AttendCourse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) OpenAttend(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.CourseService/OpenAttend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) CloseAttend(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.CourseService/CloseAttend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) CreateEnrolls(ctx context.Context, in *EnrollsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.CourseService/CreateEnrolls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) FindEnroll(ctx context.Context, in *EnrollFindRequest, opts ...grpc.CallOption) (*Enroll, error) {
	out := new(Enroll)
	err := grpc.Invoke(ctx, "/acourse.CourseService/FindEnroll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CourseService service

type CourseServiceServer interface {
	ListCourses(context.Context, *ListRequest) (*CoursesResponse, error)
	ListPublicCourses(context.Context, *ListRequest) (*CoursesResponse, error)
	ListOwnCourses(context.Context, *UserIDRequest) (*CoursesResponse, error)
	ListEnrolledCourses(context.Context, *UserIDRequest) (*CoursesResponse, error)
	GetCourse(context.Context, *CourseIDRequest) (*CourseResponse, error)
	CreateCourse(context.Context, *Course) (*Course, error)
	UpdateCourse(context.Context, *Course) (*Empty, error)
	EnrollCourse(context.Context, *EnrollRequest) (*Empty, error)
	AttendCourse(context.Context, *CourseIDRequest) (*Empty, error)
	OpenAttend(context.Context, *CourseIDRequest) (*Empty, error)
	CloseAttend(context.Context, *CourseIDRequest) (*Empty, error)
	CreateEnrolls(context.Context, *EnrollsRequest) (*Empty, error)
	FindEnroll(context.Context, *EnrollFindRequest) (*Enroll, error)
}

func RegisterCourseServiceServer(s *grpc.Server, srv CourseServiceServer) {
	s.RegisterService(&_CourseService_serviceDesc, srv)
}

func _CourseService_ListCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ListCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/ListCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ListCourses(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ListPublicCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ListPublicCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/ListPublicCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ListPublicCourses(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ListOwnCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ListOwnCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/ListOwnCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ListOwnCourses(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ListEnrolledCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ListEnrolledCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/ListEnrolledCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ListEnrolledCourses(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourse(ctx, req.(*CourseIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).CreateCourse(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Course)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/UpdateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpdateCourse(ctx, req.(*Course))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_EnrollCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).EnrollCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/EnrollCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).EnrollCourse(ctx, req.(*EnrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AttendCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AttendCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/AttendCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AttendCourse(ctx, req.(*CourseIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_OpenAttend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).OpenAttend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/OpenAttend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).OpenAttend(ctx, req.(*CourseIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_CloseAttend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).CloseAttend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/CloseAttend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).CloseAttend(ctx, req.(*CourseIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_CreateEnrolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).CreateEnrolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/CreateEnrolls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).CreateEnrolls(ctx, req.(*EnrollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_FindEnroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).FindEnroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.CourseService/FindEnroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).FindEnroll(ctx, req.(*EnrollFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acourse.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCourses",
			Handler:    _CourseService_ListCourses_Handler,
		},
		{
			MethodName: "ListPublicCourses",
			Handler:    _CourseService_ListPublicCourses_Handler,
		},
		{
			MethodName: "ListOwnCourses",
			Handler:    _CourseService_ListOwnCourses_Handler,
		},
		{
			MethodName: "ListEnrolledCourses",
			Handler:    _CourseService_ListEnrolledCourses_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _CourseService_GetCourse_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _CourseService_CreateCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _CourseService_UpdateCourse_Handler,
		},
		{
			MethodName: "EnrollCourse",
			Handler:    _CourseService_EnrollCourse_Handler,
		},
		{
			MethodName: "AttendCourse",
			Handler:    _CourseService_AttendCourse_Handler,
		},
		{
			MethodName: "OpenAttend",
			Handler:    _CourseService_OpenAttend_Handler,
		},
		{
			MethodName: "CloseAttend",
			Handler:    _CourseService_CloseAttend_Handler,
		},
		{
			MethodName: "CreateEnrolls",
			Handler:    _CourseService_CreateEnrolls_Handler,
		},
		{
			MethodName: "FindEnroll",
			Handler:    _CourseService_FindEnroll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acourse.proto",
}

// Client API for AssignmentService service

type AssignmentServiceClient interface {
	CreateAssignment(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*Assignment, error)
	UpdateAssignment(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*Empty, error)
	OpenAssignment(ctx context.Context, in *AssignmentIDRequest, opts ...grpc.CallOption) (*Empty, error)
	CloseAssignment(ctx context.Context, in *AssignmentIDRequest, opts ...grpc.CallOption) (*Empty, error)
	ListAssignments(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*AssignmentsResponse, error)
	DeleteAssignment(ctx context.Context, in *AssignmentIDRequest, opts ...grpc.CallOption) (*Empty, error)
	SubmitUserAssignment(ctx context.Context, in *UserAssignment, opts ...grpc.CallOption) (*UserAssignment, error)
	DeleteUserAssignment(ctx context.Context, in *UserAssignmentIDRequest, opts ...grpc.CallOption) (*Empty, error)
	GetUserAssignments(ctx context.Context, in *AssignmentIDsRequest, opts ...grpc.CallOption) (*UserAssignmentsResponse, error)
	ListUserAssignments(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*UserAssignmentsResponse, error)
}

type assignmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewAssignmentServiceClient(cc *grpc.ClientConn) AssignmentServiceClient {
	return &assignmentServiceClient{cc}
}

func (c *assignmentServiceClient) CreateAssignment(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*Assignment, error) {
	out := new(Assignment)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/CreateAssignment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) UpdateAssignment(ctx context.Context, in *Assignment, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/UpdateAssignment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) OpenAssignment(ctx context.Context, in *AssignmentIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/OpenAssignment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) CloseAssignment(ctx context.Context, in *AssignmentIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/CloseAssignment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) ListAssignments(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*AssignmentsResponse, error) {
	out := new(AssignmentsResponse)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/ListAssignments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) DeleteAssignment(ctx context.Context, in *AssignmentIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/DeleteAssignment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) SubmitUserAssignment(ctx context.Context, in *UserAssignment, opts ...grpc.CallOption) (*UserAssignment, error) {
	out := new(UserAssignment)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/SubmitUserAssignment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) DeleteUserAssignment(ctx context.Context, in *UserAssignmentIDRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/DeleteUserAssignment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) GetUserAssignments(ctx context.Context, in *AssignmentIDsRequest, opts ...grpc.CallOption) (*UserAssignmentsResponse, error) {
	out := new(UserAssignmentsResponse)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/GetUserAssignments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentServiceClient) ListUserAssignments(ctx context.Context, in *CourseIDRequest, opts ...grpc.CallOption) (*UserAssignmentsResponse, error) {
	out := new(UserAssignmentsResponse)
	err := grpc.Invoke(ctx, "/acourse.AssignmentService/ListUserAssignments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AssignmentService service

type AssignmentServiceServer interface {
	CreateAssignment(context.Context, *Assignment) (*Assignment, error)
	UpdateAssignment(context.Context, *Assignment) (*Empty, error)
	OpenAssignment(context.Context, *AssignmentIDRequest) (*Empty, error)
	CloseAssignment(context.Context, *AssignmentIDRequest) (*Empty, error)
	ListAssignments(context.Context, *CourseIDRequest) (*AssignmentsResponse, error)
	DeleteAssignment(context.Context, *AssignmentIDRequest) (*Empty, error)
	SubmitUserAssignment(context.Context, *UserAssignment) (*UserAssignment, error)
	DeleteUserAssignment(context.Context, *UserAssignmentIDRequest) (*Empty, error)
	GetUserAssignments(context.Context, *AssignmentIDsRequest) (*UserAssignmentsResponse, error)
	ListUserAssignments(context.Context, *CourseIDRequest) (*UserAssignmentsResponse, error)
}

func RegisterAssignmentServiceServer(s *grpc.Server, srv AssignmentServiceServer) {
	s.RegisterService(&_AssignmentService_serviceDesc, srv)
}

func _AssignmentService_CreateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Assignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).CreateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/CreateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).CreateAssignment(ctx, req.(*Assignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_UpdateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Assignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).UpdateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/UpdateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).UpdateAssignment(ctx, req.(*Assignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_OpenAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignmentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).OpenAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/OpenAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).OpenAssignment(ctx, req.(*AssignmentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_CloseAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignmentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).CloseAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/CloseAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).CloseAssignment(ctx, req.(*AssignmentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_ListAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).ListAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/ListAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).ListAssignments(ctx, req.(*CourseIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_DeleteAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignmentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).DeleteAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/DeleteAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).DeleteAssignment(ctx, req.(*AssignmentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_SubmitUserAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAssignment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).SubmitUserAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/SubmitUserAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).SubmitUserAssignment(ctx, req.(*UserAssignment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_DeleteUserAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAssignmentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).DeleteUserAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/DeleteUserAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).DeleteUserAssignment(ctx, req.(*UserAssignmentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_GetUserAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignmentIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).GetUserAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/GetUserAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).GetUserAssignments(ctx, req.(*AssignmentIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentService_ListUserAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServiceServer).ListUserAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/acourse.AssignmentService/ListUserAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServiceServer).ListUserAssignments(ctx, req.(*CourseIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssignmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "acourse.AssignmentService",
	HandlerType: (*AssignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAssignment",
			Handler:    _AssignmentService_CreateAssignment_Handler,
		},
		{
			MethodName: "UpdateAssignment",
			Handler:    _AssignmentService_UpdateAssignment_Handler,
		},
		{
			MethodName: "OpenAssignment",
			Handler:    _AssignmentService_OpenAssignment_Handler,
		},
		{
			MethodName: "CloseAssignment",
			Handler:    _AssignmentService_CloseAssignment_Handler,
		},
		{
			MethodName: "ListAssignments",
			Handler:    _AssignmentService_ListAssignments_Handler,
		},
		{
			MethodName: "DeleteAssignment",
			Handler:    _AssignmentService_DeleteAssignment_Handler,
		},
		{
			MethodName: "SubmitUserAssignment",
			Handler:    _AssignmentService_SubmitUserAssignment_Handler,
		},
		{
			MethodName: "DeleteUserAssignment",
			Handler:    _AssignmentService_DeleteUserAssignment_Handler,
		},
		{
			MethodName: "GetUserAssignments",
			Handler:    _AssignmentService_GetUserAssignments_Handler,
		},
		{
			MethodName: "ListUserAssignments",
			Handler:    _AssignmentService_ListUserAssignments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acourse.proto",
}

func init() { proto.RegisterFile("acourse.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1768 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x59, 0x4b, 0x73, 0xdc, 0x44,
	0x10, 0xf6, 0xbe, 0x77, 0x7b, 0xbd, 0x0f, 0x2b, 0x2e, 0x5b, 0x51, 0x02, 0x65, 0x86, 0x54, 0xc5,
	0x09, 0xc4, 0x05, 0x6b, 0x52, 0x95, 0x17, 0x49, 0x8c, 0x6d, 0x9c, 0x67, 0x39, 0x25, 0xe3, 0xca,
	0x85, 0x03, 0xf2, 0x6a, 0xe2, 0x88, 0x92, 0xa5, 0x45, 0x1a, 0x39, 0xe5, 0xdf, 0x00, 0x37, 0xf2,
	0x03, 0x38, 0x73, 0xe7, 0xce, 0x89, 0xbf, 0xc1, 0x85, 0x13, 0xbf, 0x82, 0x9a, 0x97, 0x66, 0x34,
	0xfb, 0x70, 0xb0, 0x03, 0x27, 0xab, 0x7b, 0xba, 0x7b, 0xba, 0xbf, 0xee, 0x9e, 0xe9, 0x59, 0x43,
	0xc7, 0x1b, 0xc6, 0x59, 0x92, 0xe2, 0xb5, 0x51, 0x12, 0x93, 0xd8, 0x6a, 0x08, 0x12, 0x5d, 0x85,
	0xce, 0x7e, 0x8a, 0x93, 0xc7, 0x5b, 0x2e, 0xfe, 0x21, 0xc3, 0x29, 0xb1, 0x96, 0xa0, 0x9e, 0x51,
	0x86, 0x6f, 0x97, 0x56, 0x4a, 0xab, 0x2d, 0x57, 0x50, 0xe8, 0x3a, 0x74, 0xb9, 0x60, 0x2a, 0x25,
	0x6d, 0x68, 0xf0, 0xb5, 0xd4, 0x2e, 0xad, 0x54, 0x56, 0x5b, 0xae, 0x24, 0xd1, 0x17, 0xdc, 0x68,
	0xea, 0xe2, 0x74, 0x14, 0x47, 0x29, 0xb6, 0x3e, 0x86, 0x1a, 0x5d, 0xe3, 0x82, 0xed, 0x41, 0x67,
	0x4d, 0x7a, 0x43, 0xc5, 0x5c, 0xbe, 0x86, 0xf6, 0xa1, 0xb3, 0x83, 0xc9, 0x73, 0x9c, 0x6b, 0x7d,
	0x04, 0x55, 0xba, 0xc2, 0x1c, 0x19, 0x53, 0x62, 0x4b, 0x54, 0x24, 0x89, 0x43, 0x6c, 0x97, 0x0d,
	0x11, 0x37, 0x0e, 0xb1, 0xcb, 0x96, 0xd0, 0x5d, 0x68, 0x3f, 0x0b, 0x52, 0xa2, 0xc5, 0x17, 0xbf,
	0x7a, 0x95, 0x62, 0xc2, 0xcc, 0xd6, 0x5c, 0x41, 0x59, 0x8b, 0x50, 0x0b, 0x83, 0xa3, 0x80, 0x30,
	0x53, 0x35, 0x97, 0x13, 0xe8, 0x6d, 0x09, 0xfa, 0x2f, 0xbc, 0x93, 0x23, 0x1c, 0x11, 0x15, 0xcd,
	0xa7, 0xd0, 0x1c, 0x09, 0x9e, 0x08, 0xa8, 0x9f, 0x6f, 0x2c, 0x84, 0xdd, 0x5c, 0x42, 0xc5, 0x5e,
	0x9e, 0x1e, 0xbb, 0x75, 0x03, 0x1a, 0x9c, 0x9b, 0xda, 0x15, 0x26, 0x76, 0x21, 0x17, 0xdb, 0x64,
	0x7f, 0xbe, 0x09, 0xa2, 0x13, 0x57, 0xca, 0xa0, 0x75, 0x58, 0x10, 0x1b, 0x69, 0xf9, 0xf8, 0x10,
	0x40, 0x6c, 0xaa, 0x52, 0xa2, 0x71, 0xd0, 0x2e, 0x5c, 0x14, 0x4a, 0xfb, 0x23, 0xdf, 0x23, 0xf8,
	0x45, 0x12, 0x0c, 0xb1, 0x54, 0xbe, 0x0c, 0xad, 0x5c, 0x54, 0x64, 0x5e, 0x31, 0x28, 0x38, 0x23,
	0x2a, 0xcd, 0xc0, 0x29, 0xb9, 0x9c, 0x40, 0xbf, 0x94, 0xa0, 0xc7, 0xbd, 0x53, 0xd8, 0xac, 0xa9,
	0x40, 0x38, 0x34, 0x8b, 0x46, 0x20, 0x7b, 0x47, 0x5e, 0x18, 0xe6, 0x91, 0xbc, 0x1b, 0x3a, 0xb7,
	0x60, 0x1e, 0x47, 0x49, 0x1c, 0x86, 0x9b, 0x71, 0x46, 0x41, 0xaf, 0x18, 0x96, 0xb7, 0xd5, 0xa2,
	0x5b, 0x90, 0x44, 0x37, 0xa4, 0x87, 0xaa, 0xc0, 0x1d, 0x68, 0x72, 0xb5, 0x3c, 0xd0, 0x9c, 0x46,
	0x87, 0xd0, 0xe1, 0xb6, 0xde, 0x41, 0xd8, 0xea, 0x43, 0x25, 0x4b, 0x42, 0x06, 0x49, 0xcb, 0xa5,
	0x9f, 0x96, 0x05, 0xd5, 0x61, 0xec, 0x63, 0xbb, 0xc2, 0x58, 0xec, 0x5b, 0x41, 0x57, 0xd5, 0xa1,
	0xfb, 0xa3, 0x04, 0x5d, 0xee, 0x58, 0x8e, 0xdc, 0x55, 0xa8, 0x73, 0xd3, 0xa2, 0xde, 0x7b, 0x06,
	0x70, 0xae, 0x58, 0xce, 0xdb, 0xa2, 0x3c, 0xbd, 0x2d, 0x1c, 0x68, 0x72, 0x18, 0xb0, 0xcf, 0x9c,
	0x69, 0xba, 0x39, 0x4d, 0x1d, 0x8a, 0xdf, 0x44, 0xd8, 0x67, 0x0e, 0x35, 0x5d, 0x4e, 0x50, 0x8d,
	0x51, 0x96, 0x0c, 0x5f, 0x7b, 0x29, 0xb6, 0x6b, 0x5c, 0x43, 0xd2, 0x74, 0xcd, 0x23, 0x04, 0x47,
	0x3e, 0xf6, 0xed, 0x3a, 0x5f, 0x93, 0x34, 0x6a, 0x40, 0x6d, 0xfb, 0x68, 0x44, 0x4e, 0xd0, 0x31,
	0x54, 0xa9, 0x03, 0x56, 0x17, 0xca, 0x81, 0xc4, 0xaa, 0x1c, 0x30, 0xc3, 0xd4, 0xa5, 0xc8, 0x3b,
	0xc2, 0x02, 0xaa, 0x9c, 0xa6, 0x78, 0x31, 0xbe, 0xc0, 0x8b, 0xf1, 0x28, 0x5e, 0xaf, 0x63, 0x12,
	0x33, 0xf7, 0x5a, 0x2e, 0x27, 0xe8, 0x59, 0xe3, 0x1d, 0xc4, 0x19, 0x79, 0xce, 0xbd, 0x6b, 0xb9,
	0x92, 0x44, 0xf7, 0xa0, 0x4a, 0x9b, 0x9d, 0xea, 0x79, 0xfe, 0x51, 0x10, 0xb1, 0xad, 0x9b, 0x2e,
	0x27, 0x68, 0x4f, 0x04, 0x51, 0x4a, 0x92, 0x6c, 0x48, 0x62, 0x8e, 0x58, 0xd3, 0xd5, 0x38, 0xe8,
	0x29, 0x75, 0xdf, 0x0b, 0x42, 0xea, 0x36, 0x89, 0x45, 0xd3, 0x94, 0xf9, 0x86, 0x69, 0x76, 0xf0,
	0x3d, 0x1e, 0x12, 0xe1, 0xb5, 0x24, 0xa9, 0xd3, 0x07, 0xb1, 0x7f, 0x22, 0xfc, 0x63, 0xdf, 0x4f,
	0xaa, 0xcd, 0x4a, 0xbf, 0x8a, 0x7e, 0xac, 0x43, 0x9d, 0xe7, 0x6a, 0x0c, 0x85, 0xcb, 0xd0, 0x1a,
	0x26, 0xd8, 0x23, 0xd8, 0xdf, 0x90, 0x06, 0x15, 0x83, 0xae, 0x66, 0xac, 0x25, 0xe9, 0x2a, 0x07,
	0x43, 0x31, 0x68, 0x64, 0x24, 0x20, 0x21, 0x96, 0x88, 0x30, 0xc2, 0xba, 0x0e, 0xfd, 0xf4, 0x75,
	0x9c, 0x90, 0x2d, 0x9c, 0x0e, 0x93, 0x60, 0x44, 0x82, 0x38, 0x12, 0xd0, 0x8c, 0xf1, 0xad, 0x15,
	0x68, 0xfb, 0x9a, 0x58, 0x9d, 0x89, 0xe9, 0x2c, 0x85, 0x7a, 0x43, 0x47, 0x5d, 0x94, 0x4a, 0x62,
	0x37, 0x39, 0x97, 0x11, 0x94, 0x9b, 0x12, 0x2f, 0x21, 0x76, 0x8b, 0x73, 0x19, 0x21, 0xbb, 0x01,
	0x0a, 0xdd, 0x40, 0x4e, 0x46, 0xd8, 0x6e, 0x73, 0xa0, 0xe8, 0x37, 0xd5, 0x3d, 0x0e, 0x7c, 0x1c,
	0xdb, 0xf3, 0x5c, 0x97, 0x11, 0xaa, 0x47, 0x3a, 0x5a, 0x8f, 0x58, 0xab, 0xd0, 0xf3, 0x83, 0x74,
	0x48, 0x1b, 0x19, 0xfb, 0xec, 0xb0, 0xb2, 0xbb, 0x6c, 0xdd, 0x64, 0x5b, 0x9f, 0x41, 0x23, 0x66,
	0x71, 0xa4, 0x76, 0x8f, 0x35, 0xc5, 0x92, 0xd1, 0x3b, 0x6b, 0xbb, 0x6c, 0xd9, 0x95, 0x62, 0xd6,
	0x3a, 0xed, 0xeb, 0x88, 0xb0, 0x23, 0xbc, 0xcf, 0x4e, 0x93, 0x65, 0x53, 0x65, 0x93, 0xaf, 0xbb,
	0xb9, 0xa0, 0x85, 0xe4, 0x31, 0xb4, 0x85, 0x89, 0x17, 0x84, 0xf6, 0x02, 0x8b, 0xa1, 0xc0, 0x73,
	0x4e, 0xa0, 0x21, 0x14, 0x55, 0xde, 0x4a, 0x7a, 0xde, 0x8c, 0x5c, 0x94, 0x27, 0xe6, 0x82, 0x63,
	0x54, 0xd1, 0x31, 0xa2, 0x7a, 0xf1, 0x9b, 0x28, 0x8c, 0x3d, 0x7f, 0xdf, 0x7d, 0x26, 0x6a, 0x41,
	0x67, 0x39, 0x3f, 0x95, 0xa0, 0xce, 0xe3, 0xa4, 0x97, 0xdc, 0x28, 0x3b, 0x08, 0x83, 0xa1, 0xe8,
	0x06, 0x41, 0x51, 0x3e, 0xf7, 0x56, 0xb4, 0x82, 0xa0, 0x28, 0x9f, 0x77, 0xb4, 0x38, 0x2d, 0x04,
	0x45, 0xdb, 0xc7, 0x4b, 0xd3, 0xe0, 0x30, 0xa2, 0xf7, 0x80, 0x38, 0x30, 0x34, 0x0e, 0x6d, 0x6e,
	0x99, 0x0b, 0x79, 0x6a, 0x48, 0x1a, 0xfd, 0x55, 0x86, 0xb6, 0x76, 0xe4, 0x8f, 0xb5, 0xc4, 0xf9,
	0xcb, 0xfa, 0x7f, 0x2c, 0xda, 0x73, 0x95, 0xe7, 0x4d, 0xb3, 0x3c, 0x2f, 0x4d, 0xba, 0x13, 0xcd,
	0x1a, 0x75, 0xae, 0xe4, 0xe9, 0x9c, 0x05, 0xf3, 0x00, 0x40, 0x4d, 0x08, 0xd3, 0x41, 0x2e, 0x6b,
	0x20, 0xa3, 0x9f, 0xcb, 0xd0, 0x10, 0xa3, 0xc0, 0x7b, 0x3d, 0xa9, 0xd4, 0xec, 0x58, 0xd5, 0x67,
	0xc7, 0xc2, 0x2d, 0x5a, 0x33, 0x6e, 0xd1, 0x2b, 0xd0, 0x89, 0x93, 0xe0, 0x30, 0x88, 0xbc, 0x90,
	0x83, 0x58, 0x67, 0x20, 0x16, 0x99, 0x2a, 0x05, 0x0d, 0x3d, 0x05, 0xf2, 0xbe, 0x6d, 0x6a, 0xf7,
	0xad, 0x48, 0x69, 0x4b, 0xa5, 0x74, 0x09, 0xea, 0x29, 0xf1, 0x48, 0x96, 0x8a, 0x3c, 0x0b, 0x8a,
	0x46, 0xee, 0x11, 0x91, 0xe8, 0xb2, 0x47, 0xd0, 0x77, 0x60, 0x09, 0x50, 0xbe, 0x0e, 0x22, 0xff,
	0x94, 0x79, 0xb8, 0x10, 0x53, 0xd9, 0x88, 0x49, 0xed, 0x58, 0xd1, 0x77, 0x44, 0x0f, 0xa0, 0xad,
	0x8d, 0x2a, 0x33, 0x87, 0x8b, 0x45, 0xa8, 0xf1, 0x7c, 0x8b, 0x71, 0x94, 0x27, 0xfb, 0xf7, 0x12,
	0xc0, 0x86, 0x6a, 0xbf, 0xf7, 0x99, 0x3b, 0xdd, 0x99, 0xea, 0xb8, 0x33, 0xbc, 0x8a, 0x6a, 0x33,
	0x4e, 0xb2, 0x09, 0xb7, 0x8a, 0x05, 0xd5, 0x78, 0x84, 0x23, 0x96, 0xb4, 0xa6, 0xcb, 0xbe, 0xd1,
	0x6d, 0xb8, 0xa0, 0x22, 0x50, 0x53, 0x19, 0x82, 0x79, 0x75, 0xae, 0xe4, 0x78, 0x14, 0x78, 0xe8,
	0x1e, 0x2c, 0xea, 0xaa, 0xf9, 0xe0, 0x7b, 0x05, 0x3a, 0xba, 0x9c, 0x9c, 0x7d, 0x8b, 0x4c, 0xf4,
	0x4c, 0xdf, 0x58, 0x0d, 0xac, 0x37, 0xa1, 0xad, 0xe4, 0xe4, 0xd0, 0xaa, 0xa6, 0x6f, 0xa5, 0xe2,
	0xea, 0x72, 0xe8, 0xd7, 0x12, 0x7f, 0x0f, 0xfd, 0x47, 0xd9, 0x30, 0xe1, 0xa8, 0x8e, 0xc3, 0xa1,
	0x55, 0x66, 0xad, 0x50, 0x99, 0xa2, 0x03, 0xea, 0x79, 0x07, 0xa0, 0x6f, 0x61, 0xb9, 0xe8, 0xab,
	0x0a, 0x7f, 0x03, 0x7a, 0x59, 0x71, 0x49, 0x40, 0xb0, 0x5c, 0x98, 0x2b, 0x35, 0x18, 0x4c, 0x79,
	0x74, 0xcd, 0xb4, 0xae, 0xb2, 0x6a, 0x40, 0x82, 0xee, 0x41, 0x7d, 0x3b, 0xbf, 0x71, 0xf8, 0x73,
	0x52, 0xb6, 0x15, 0xa7, 0x68, 0x19, 0xca, 0x81, 0x5d, 0xb6, 0x95, 0xa4, 0xd1, 0x5d, 0xe8, 0x72,
	0xed, 0x3c, 0xf3, 0xd7, 0xa0, 0xc1, 0x6f, 0x30, 0xe9, 0x75, 0xcf, 0x78, 0x13, 0xb8, 0x72, 0x1d,
	0xed, 0xc0, 0x02, 0x67, 0x9d, 0xb3, 0xb9, 0x07, 0x6f, 0xcb, 0xd0, 0xa6, 0xce, 0xee, 0xe1, 0xe4,
	0x98, 0x1e, 0x42, 0x03, 0x68, 0xec, 0x60, 0xc2, 0x66, 0xdf, 0xa5, 0x02, 0x66, 0x39, 0x0c, 0x4e,
	0x71, 0x46, 0x47, 0x73, 0xd6, 0x97, 0xd0, 0x14, 0x3a, 0xa9, 0xb5, 0x6c, 0x28, 0xc9, 0xe0, 0x9c,
	0xa2, 0xb5, 0x3c, 0x65, 0x68, 0xce, 0xfa, 0x1c, 0x6a, 0xec, 0xa5, 0x6c, 0x75, 0x55, 0xb8, 0x74,
	0x08, 0xd7, 0x54, 0x0a, 0x2f, 0x69, 0x34, 0x67, 0x7d, 0x02, 0x4d, 0xfe, 0xea, 0x7b, 0x8e, 0xad,
	0xa2, 0x3b, 0x8e, 0x61, 0x04, 0xcd, 0x89, 0x90, 0xd8, 0x58, 0x7d, 0x7a, 0x48, 0x54, 0x0c, 0xcd,
	0x0d, 0x6e, 0xc1, 0x3c, 0x9b, 0xa4, 0x25, 0x2c, 0xab, 0x50, 0xdd, 0xa3, 0x23, 0x84, 0x6e, 0x9d,
	0x0e, 0x48, 0x63, 0xbb, 0x0d, 0xfe, 0xac, 0x40, 0x57, 0x1c, 0xbc, 0x52, 0xf9, 0x11, 0x5c, 0xa0,
	0x6f, 0xf6, 0x97, 0x5e, 0x40, 0x82, 0xe8, 0x50, 0x3e, 0xc0, 0x2d, 0xf5, 0xe2, 0xd3, 0x5e, 0xf4,
	0xce, 0x45, 0xf3, 0xf1, 0xad, 0x43, 0x25, 0x2c, 0x3d, 0x0a, 0x52, 0x12, 0x27, 0x27, 0xe7, 0xb1,
	0xf4, 0x00, 0x7a, 0x1b, 0xa3, 0x51, 0x12, 0x1f, 0xe3, 0xdc, 0x8a, 0x63, 0xca, 0x6b, 0xd9, 0x1b,
	0x47, 0xf5, 0x3e, 0x74, 0x5d, 0x4c, 0x9f, 0x10, 0x67, 0xd4, 0xdf, 0x84, 0xb6, 0xf6, 0x70, 0xb7,
	0x90, 0xa9, 0x3c, 0xfe, 0xaa, 0x9f, 0xe8, 0x44, 0x9b, 0x36, 0x80, 0xbc, 0xfd, 0x2f, 0x99, 0x46,
	0xb4, 0xee, 0x70, 0xc6, 0x7e, 0xd5, 0x40, 0x73, 0xd6, 0x3a, 0x74, 0x36, 0xd9, 0x19, 0x26, 0x2d,
	0x8c, 0x09, 0x4d, 0xc8, 0xf0, 0x6f, 0x75, 0xe8, 0x88, 0x49, 0x47, 0x24, 0xf8, 0x01, 0xff, 0x51,
	0x46, 0xfc, 0x7a, 0x30, 0x25, 0x1d, 0xb6, 0x31, 0x26, 0xe9, 0xd9, 0xd8, 0x86, 0x05, 0x2a, 0xfa,
	0x82, 0xcd, 0xb5, 0x67, 0x37, 0xb3, 0x05, 0x5d, 0x2a, 0xba, 0xfb, 0x26, 0x92, 0x36, 0xa6, 0x15,
	0xfc, 0x2c, 0x2b, 0x8f, 0x79, 0x91, 0x6d, 0x8b, 0x27, 0xf6, 0x79, 0x4c, 0x3d, 0x84, 0xd6, 0x0e,
	0x16, 0xb8, 0x58, 0xa6, 0xa0, 0x32, 0x61, 0xbe, 0x56, 0x34, 0x0b, 0x03, 0x98, 0xe7, 0x19, 0x12,
	0x46, 0xcc, 0xdf, 0x11, 0x1c, 0x93, 0xc1, 0x0e, 0x94, 0x79, 0x5e, 0x3d, 0xd3, 0x74, 0xc6, 0x0b,
	0x89, 0xf6, 0xbb, 0x9c, 0x65, 0xa8, 0xca, 0x92, 0x79, 0xf2, 0x4e, 0x2d, 0xc1, 0x3b, 0x30, 0xbf,
	0xc1, 0x9e, 0x17, 0xa7, 0x46, 0x39, 0x69, 0x57, 0xd8, 0x1d, 0xe1, 0x88, 0xeb, 0xff, 0x2b, 0xcd,
	0xdb, 0xd0, 0xde, 0x0c, 0xe3, 0x14, 0x9f, 0x41, 0xf5, 0x8e, 0xac, 0x79, 0x71, 0xfb, 0x68, 0x47,
	0x76, 0xf1, 0x3e, 0x9a, 0xa0, 0x7b, 0x17, 0x80, 0xb6, 0x94, 0xb8, 0xf5, 0x1c, 0x43, 0x51, 0xef,
	0x36, 0xf3, 0xea, 0x42, 0x73, 0x83, 0xbf, 0x6b, 0xb0, 0xa0, 0xae, 0x55, 0xd9, 0x3b, 0xf7, 0xa1,
	0xcf, 0xdd, 0xd1, 0x66, 0x8f, 0x49, 0x03, 0x8b, 0x33, 0x89, 0xc9, 0x90, 0xe8, 0xf3, 0x64, 0x9f,
	0xa6, 0x3f, 0x1e, 0xcd, 0x43, 0xe8, 0x32, 0xf8, 0x95, 0xe2, 0xe5, 0x09, 0x8a, 0xb3, 0xb0, 0xdc,
	0x80, 0x1e, 0x4f, 0xc3, 0xd9, 0x4d, 0x3c, 0x85, 0x1e, 0xed, 0x36, 0x6d, 0x04, 0x99, 0x91, 0xcd,
	0x49, 0xc6, 0xf5, 0x7e, 0xfb, 0x0a, 0xfa, 0x5b, 0x38, 0xc4, 0xe4, 0x3c, 0x0e, 0x3d, 0x81, 0xc5,
	0xbd, 0xec, 0xe0, 0x28, 0x20, 0xc6, 0x40, 0x38, 0x6d, 0x84, 0x72, 0xa6, 0x2d, 0x70, 0x5b, 0xdc,
	0x1f, 0xc3, 0xd6, 0xca, 0x14, 0x95, 0x59, 0x7e, 0xbd, 0x04, 0x4b, 0x4c, 0x19, 0x3a, 0x56, 0x1f,
	0x4c, 0x8c, 0x2e, 0x2f, 0xe1, 0x69, 0x1b, 0xe9, 0xa0, 0xed, 0xf1, 0xf3, 0xce, 0xb4, 0x3c, 0x3d,
	0x0b, 0xef, 0x60, 0xf4, 0xa0, 0xce, 0xfe, 0x33, 0xb1, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xcf, 0xaa, 0x89, 0xc4, 0xaa, 0x18, 0x00, 0x00,
}
